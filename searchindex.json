{"categories":[],"posts":[{"content":"JavaScript [TOC]\nJS介绍  JS是弱类型，即类型可变； Java是强类型，即定义变量时，类型已确定，而且不可变。  JS的特点：\n  交互性（它可以做的就是信息的动态交互）\n  安全性（不允许直接访问本地硬盘）\n  跨平台性（只要是可以解释JS 的浏览器都可以执行，和平台无关）\n  JavaScript 和html 代码的结合方式：\n 只需要在head 标签中，或者在body 标签中， 使用script 标签来书写JavaScript 代码； 使用script 标签通过src属性引入单独的JavaScript 代码文件。   变量  JavaScript 的变量类型：   数值类型： number 字符串类型： string 对象类型： object 布尔类型： boolean 函数类型： function  JavaScript 里特殊的值    undefined 未定义，所有js 变量未赋于初始值的时候，默认值都是undefined；\n  null 空值；\n  NaN 全称是：Not a Number。非数字，非数值。\n   变量的定义方式\n var 变量名; var 变量名= 值;\n   关系（比较）运算  等于： == 等于是简单的做字面值的比较 全等于： === 除了做字面值的比较之外，还会比较两个变量的数据类型  逻辑运算  且运算： \u0026amp;\u0026amp;  第一种：当表达式全为真的时候，返回最后一个表达式的值； 第二种：当表达式中，有一个为假的时候。返回第一个为假的表达式的值。   或运算： ||  第一种情况：当表达式全为假时，返回最后一个表达式的值； 第二种情况：只要有一个表达式为真。就会把第一个为真的表达式的值。   取反运算： ! 在JavaScript 语言中，所有的变量，都可以做为一个boolean 类型的变量去使用。 0 、null、undefined、””(空串，没有空格) 都认为是false  数组   数组的定义格式\n var 数组名= []; // 空数组 var 数组名= [1 , ’abc’ , true]; // 定义数组同时赋值元素\n   javaScript语言中的数组，只要我们通过数组下标赋值，那么最大的下标值，就会自动的给数组做扩容操作。\n  函数  第一种，可以使用function 关键字来定义函数。  function 函数名(形参列表) { 函数体 }  在JavaScript 语言中，如何定义带有返回值的函数？ 只需要在函数体内直接使用return 语句返回值即可！\n  第二种\n var 函数名= function(形参列表) { 函数体}\n   JS不允许重载 在Java 中函数允许重载。但是在JS 中函数的重载会直接覆盖掉上一次的定义\n函数的arguments 隐形参数（只在function 函数内） 就是在function 函数中不需要定义，但却可以直接用来获取所有参数的变量。我们管它叫隐形参数。隐形参数特别像java 基础的可变长参数一样。\npublic void fun( Object ... args );  可变长参数其他是一个数组。那么js 中的隐形参数也跟java 的可变长参数一样。操作类似数组。\nJS 中的自定义对象 1. Object 形式的自定义对象  对象的定义：  var 变量名= new Object(); // 对象实例（空对象） 变量名.属性名= 值; // 定义一个属性 变量名.函数名= function(){} // 定义一个函数   对象的访问：  变量名.属性/ 函数名();  2. {}花括号形式的自定义对象  对象的定义：  var 变量名= { // 空对象 属性名：值, // 定义一个属性 属性名：值, // 定义一个属性 函数名：function(){} // 定义一个函数 };   对象的访问：  变量名.属性/ 函数名();\t JS中的事件 事件是电脑输入设备与页面进行交互的响应。\n常用的事件：\n  onload 加载完成事件： 页面加载完成之后，常用于做页面js 代码初始化操作。\n  onclick 单击事件： 常用于按钮的点击响应操作。\n  onblur 失去焦点事件： 常用于输入框失去焦点后验证其输入内容是否合法。\n  onchange 内容发生改变事件： 常用于下拉列表和输入框内容发生改变后操作。\n  onsubmit 表单提交事件： 常用于表单提交前，验证所有表单项是否合法。\n  事件的注册（绑定）:是告诉浏览器，当事件响应后要执行哪些操作代码。\n 静态注册事件：通过html 标签的事件属性直接赋于事件响应后的代码，这种方式我们叫静态注册。 动态注册事件：是指先通过js 代码得到标签的dom对象，然后再通过dom 对象.事件名= function(){} 这种形式赋于事件响应后的代码，叫动态注册。 动态注册基本步骤： 1、获取标签对象 2、标签对象.事件名= fucntion(){}  1. onload加载完成事件:浏览器解析完页面之后就会自动触发的事件。 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Title\u0026lt;/title\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt; // onload事件的方法 function onloadFun() { alert('静态注册onload事件，所有代码'); } // onload事件动态注册。是固定写法 window.onload = function () { alert(\u0026quot;动态注册的onload事件\u0026quot;); } \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;!--静态注册onload事件 onload事件是浏览器解析完页面之后就会自动触发的事件 \u0026lt;body onload=\u0026quot;onloadFun();\u0026quot;\u0026gt; --\u0026gt; \u0026lt;body onload=\u0026quot;onloadFun();\u0026quot;\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  2. onclick单击事件： 常用于按钮的点击响应操作。 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Title\u0026lt;/title\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt; function onclickFun() { alert(\u0026quot;静态注册onclick事件\u0026quot;); } // 动态注册onclick事件 window.onload = function () { // 1 获取标签对象 /* * document 是JavaScript语言提供的一个对象（文档） * getElementById通过id属性获取标签对象 **/ var btnObj = document.getElementById(\u0026quot;btn01\u0026quot;); // alert( btnObj ); // 2 通过标签对象.事件名 = function(){} btnObj.onclick = function () { alert(\u0026quot;动态注册的onclick事件\u0026quot;); } } \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!--静态注册onClick事件--\u0026gt; \u0026lt;button onclick=\u0026quot;onclickFun();\u0026quot;\u0026gt;按钮1\u0026lt;/button\u0026gt; \u0026lt;button id=\u0026quot;btn01\u0026quot;\u0026gt;按钮2\u0026lt;/button\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  3. onblur失去焦点事件： 常用于输入框失去焦点后验证其输入内容是否合法。 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Title\u0026lt;/title\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt; // 静态注册失去焦点事件 function onblurFun() { // console是控制台对象，是由JavaScript语言提供，专门用来向浏览器的控制台打印输出， 用于测试使用 // log() 是打印的方法 //alert 与失去焦点容易起冲突 console.log(\u0026quot;静态注册失去焦点事件\u0026quot;); } // 动态注册 onblur事件 window.onload = function () { //1 获取标签对象 var passwordObj = document.getElementById(\u0026quot;password\u0026quot;); // alert(passwordObj); //2 通过标签对象.事件名 = function(){}; passwordObj.onblur = function () { console.log(\u0026quot;动态注册失去焦点事件\u0026quot;); } } \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; 用户名:\u0026lt;input type=\u0026quot;text\u0026quot; onblur=\u0026quot;onblurFun();\u0026quot;\u0026gt;\u0026lt;br/\u0026gt; 密码:\u0026lt;input id=\u0026quot;password\u0026quot; type=\u0026quot;text\u0026quot; \u0026gt;\u0026lt;br/\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  4. onchange内容发生改变事件：常用于下拉列表和输入框内容发生改变后操作。 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Title\u0026lt;/title\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt; function onchangeFun() { alert(\u0026quot;女神已经改变了\u0026quot;); } window.onload = function () { //1 获取标签对象 var selObj = document.getElementById(\u0026quot;sel01\u0026quot;); // alert( selObj ); //2 通过标签对象.事件名 = function(){} selObj.onchange = function () { alert(\u0026quot;男神已经改变了\u0026quot;); } } \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; 请选择你心中的女神： \u0026lt;!--静态注册onchange事件--\u0026gt; \u0026lt;select onchange=\u0026quot;onchangeFun();\u0026quot;\u0026gt; \u0026lt;option\u0026gt;--女神--\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;芳芳\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;佳佳\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;娘娘\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; 请选择你心中的男神： \u0026lt;select id=\u0026quot;sel01\u0026quot;\u0026gt; \u0026lt;option\u0026gt;--男神--\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;国哥\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;华仔\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;富城\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  5. onsubmit 表单提交事件： 常用于表单提交前，验证所有表单项是否合法。 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Title\u0026lt;/title\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot; \u0026gt; // 静态注册表单提交事务 function onsubmitFun(){ // 要验证所有表单项是否合法，如果，有一个不合法就阻止表单提交 alert(\u0026quot;静态注册表单提交事件----发现不合法\u0026quot;); return false; } window.onload = function () { //1 获取标签对象 var formObj = document.getElementById(\u0026quot;form01\u0026quot;); //2 通过标签对象.事件名 = function(){} formObj.onsubmit = function () { // 要验证所有表单项是否合法，如果，有一个不合法就阻止表单提交 alert(\u0026quot;动态注册表单提交事件----发现不合法\u0026quot;); return false; } } \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!--return false 可以阻止 表单提交 --\u0026gt; \u0026lt;form action=\u0026quot;http://localhost:8080\u0026quot; method=\u0026quot;get\u0026quot; onsubmit=\u0026quot;return onsubmitFun();\u0026quot;\u0026gt;//注意：一定要写return \u0026lt;input type=\u0026quot;submit\u0026quot; value=\u0026quot;静态注册\u0026quot;/\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;form action=\u0026quot;http://localhost:8080\u0026quot; id=\u0026quot;form01\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;submit\u0026quot; value=\u0026quot;动态注册\u0026quot;/\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  DOM模型 DOM全称是Document Object Model 文档对象模型，就是把文档中的标签，属性，文本，转换成为对象来管理。\nDocument对象 Document 对象的理解： 第一点：Document 它管理了所有的HTML 文档内容。 第二点：document 它是一种树结构的文档，有层级关系。 第三点：它让我们把所有的标签都对象化。 第四点：我们可以通过document 访问所有的标签对象。 那么html 标签要对象化怎么办？\n\u0026lt;body\u0026gt; \u0026lt;div id=\u0026quot;div01\u0026quot;\u0026gt;div01\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt;  模拟对象化，相当于：\nclass Dom{ private String id; // id 属性 private String tagName; //表示标签名 private Dom parentNode; //父亲 private List\u0026lt;Dom\u0026gt; children; // 孩子结点 private String innerHTML; // 起始标签和结束标签中间的内容 }  Document 对象中的方法介绍  document.getElementById(elementId) 通过标签的id 属性查找标签dom 对象，elementId 是标签的id 属性值 document.getElementsByName(elementName) 通过标签的name 属性查找标签dom 对象，elementName 标签的name 属性值 document.getElementsByTagName(tagname) 通过标签名查找标签dom 对象。tagname 是标签名 document.createElement( tagName) 方法，通过给定的标签名，创建一个标签对象。tagName 是要创建的标签名  注意：document 对象的三个查询方法，如果有id 属性，优先使用getElementById 方法来进行查询；如果没有id 属性，则优先使用getElementsByName 方法来进行查询；如果id 属性和name 属性都没有最后再按标签名查getElementsByTagName。\n以上三个方法，一定要在页面加载完成之后执行，才能查询到标签对象。\n节点的常用属性和方法 节点就是标签对象\n  方法 通过具体的元素节点调用 getElementsByTagName()方法，获取当前节点的指定标签名孩子节点； appendChild( oChildNode )方法，可以添加一个子节点，oChildNode 是要添加的孩子节点\n  属性 childNodes属性，获取当前节点的所有子节点； firstChild属性，获取当前节点的第一个子节点； lastChild属性，获取当前节点的最后一个子节点； parentNode属性，获取当前节点的父节点； nextSibling属性，获取当前节点的下一个节点； previousSibling属性，获取当前节点的上一个节点； className用于获取或设置标签的class 属性值； innerHTML属性，表示获取/设置起始标签和结束标签中的内容； innerText属性，表示获取/设置起始标签和结束标签中的文本。\n  ","id":0,"section":"posts","summary":"JavaScript [TOC] JS介绍 JS是弱类型，即类型可变； Java是强类型，即定义变量时，类型已确定，而且不可变。 JS的特点： 交互性（它可以做的就是信息的动态交","tags":null,"title":"JavaScript","uri":"https://miracy.github.io/2020/07/any/","year":"2020"}],"tags":[]}